#!/usr/bin/env ruby

require "cinch"
require "sinatra"
require "yaml"
require "json"
require "net/http"

config_file = ARGV.shift || "config.yml"
if not File.exists? config_file
  puts "Can't find config file #{config_file}"
  puts "Either create it or specify another config file with: #{File.basename $0} [filename]"
  exit
end

$config = YAML.load_file config_file

$bot = Cinch::Bot.new do
  configure do |c|
    c.nick = $config["irc"]["nick"]
    c.user = "Scummette"
    c.realname = "Razor"
    c.server = $config["irc"]["server"]
    c.port = $config["irc"]["port"]
    c.password = $config["irc"]["password"]
    c.channels = $config["irc"]["channels"]
  end
end

Thread.new do
  $bot.start
end

def verify_signature(payload_body, github_signature)
  signature = 'sha1=' + OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha1'), ENV['IRC_WEBHOOK'], payload_body)
  return halt 500, "Signatures didn't match!" unless Rack::Utils.secure_compare(signature, github_signature)
end

def say(repo,msg)
  $config["irc"]["channels"].each do |chan|
    unless $config["filters"].include? chan and not $config["filters"][chan].include? repo
      $bot.Channel(chan).send msg
    end
  end
end

def join()
  $config["irc"]["channels"].each do |chan|
    unless $config["filters"].include? chan and not $config["filters"][chan].include? repo
      $bot.join(chan)
    end
  end
end

def part()
  $config["irc"]["channels"].each do |chan|
    unless $config["filters"].include? chan and not $config["filters"][chan].include? repo
      $bot.part(chan)
    end
  end
end

configure do
  set :bind, $config["http"]["host"]
  set :port, $config["http"]["port"]
  set :logging, false
  set :lock, true
end

get "/" do
  "GitBot lives here. Direct your hooks to /github."
end

post "/github" do
  request.body.rewind
  payload_body = request.body.read
  verify_signature(payload_body, request.env['HTTP_X_HUB_SIGNATURE'])
  push = JSON.parse(params[:payload])

  repo = push["repository"]["name"]
  branch = push["ref"].gsub(/^refs\/heads\//,"")
  pusher = push["pusher"]["name"]
  numberOfCommits = push["commits"].length
  forced = push["forced"]

  uri = URI('https://git.io')
  res = Net::HTTP.post_form(uri, 'url' => push["compare"])
  url = res['location']

  say repo, "[%s], %s pushed %s new commits to %s: %s" % [
    $bot.Format(:purple, repo),
    pusher,
    $bot.Format(:bold, numberOfCommits.to_s),
    $bot.Format(:purple, branch),
    $bot.Format(:aqua, $bot.Format(:underline, url))
  ]
  push["commits"][0..2].each do |c|
    say repo, "%s/%s %s %s: %s" % [
      $bot.Format(:purple, repo),
      $bot.Format(:purple, branch),
      $bot.Format(:grey, c["id"].slice(0..6)),
      c["author"]["name"],
      c["message"].split("\n")[0]
    ]
  end

  push.inspect
end
